<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Testeando pelican</title><link href="http://pignacio.github.io/pelican-test/" rel="alternate"></link><link href="http://pignacio.github.io/pelican-test/feeds/all.atom.xml" rel="self"></link><id>http://pignacio.github.io/pelican-test/</id><updated>2015-04-26T21:35:00+02:00</updated><entry><title>Mirando el blog localmente</title><link href="http://pignacio.github.io/pelican-test/mirando-el-blog-localmente.html" rel="alternate"></link><updated>2015-04-26T21:35:00+02:00</updated><author><name>Nach</name></author><id>tag:pignacio.github.io,2015-04-26:pelican-test/mirando-el-blog-localmente.html</id><summary type="html">&lt;p&gt;Para testear el blog localmente, se puede usar:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
make devserver
&lt;/pre&gt;
&lt;p&gt;Eso deja corriendo un server en background que se autorecarga cuando modificas
algún archivo.&lt;/p&gt;
&lt;p&gt;Por default queda corriendo en &lt;a class="reference external" href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>Publicando en las Github pages</title><link href="http://pignacio.github.io/pelican-test/publicando-en-las-github-pages.html" rel="alternate"></link><updated>2015-04-26T21:27:00+02:00</updated><author><name>Nach</name></author><id>tag:pignacio.github.io,2015-04-26:pelican-test/publicando-en-las-github-pages.html</id><summary type="html">&lt;p&gt;Para publicar en las github pages, hay que tener instalado &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gph-import&lt;/span&gt;&lt;/tt&gt;
(hablar con el Nacho de turno para solucionar eso :)&lt;/p&gt;
&lt;p&gt;Si eso está, solo hay que correr:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
make github
&lt;/pre&gt;
</summary></entry><entry><title>Agregando articulos</title><link href="http://pignacio.github.io/pelican-test/agregando-articulos.html" rel="alternate"></link><updated>2015-04-26T21:19:00+02:00</updated><author><name>Nach</name></author><id>tag:pignacio.github.io,2015-04-26:pelican-test/agregando-articulos.html</id><summary type="html">&lt;p&gt;Para agregar un articulo, tenés que crear un archivo adentro de la carpeta
content, por ejemplo  &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content/agregando-articulos.rst&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Es re re re importante agregarle unos tags al archivo arriba, apenas despues
del título. Por ejemplo:&lt;/p&gt;
&lt;pre class="code rest literal-block"&gt;
&lt;span class="gh"&gt;Agregando articulos&lt;/span&gt;
&lt;span class="gh"&gt;###################&lt;/span&gt;


&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2015-04-26 21:19&lt;/span&gt;
&lt;span class="nc"&gt;:modified:&lt;/span&gt; &lt;span class="nf"&gt;2015-04-26 21:19&lt;/span&gt;
&lt;span class="nc"&gt;:categories:&lt;/span&gt; &lt;span class="nf"&gt;misc&lt;/span&gt;
&lt;span class="nc"&gt;:tags:&lt;/span&gt; &lt;span class="nf"&gt;articulo&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OJO!&lt;/strong&gt; si el tag &lt;tt class="docutils literal"&gt;:date:&lt;/tt&gt; no está, el archivo nunca se procesa :(&lt;/p&gt;
&lt;p&gt;Esta es una de las cosas que me molestan de pelican, nikola te agrega esa
fecha automaticamente :)&lt;/p&gt;
</summary><category term="articulo"></category></entry><entry><title>Boobstrapeando pelican</title><link href="http://pignacio.github.io/pelican-test/boobstrapeando-pelican.html" rel="alternate"></link><updated>2015-04-26T18:46:00+02:00</updated><author><name>Ignacio Rossi</name></author><id>tag:pignacio.github.io,2015-04-26:pelican-test/boobstrapeando-pelican.html</id><summary type="html">&lt;p&gt;Antes que nada hay que instalar pelican, pero eso es mejor verlo en persona,
debería ser un toque.&lt;/p&gt;
&lt;p&gt;Primero, haces un repo en &lt;a class="reference external" href="http://www.github.com"&gt;github&lt;/a&gt;. Si lo vas a hostear en las github pages, la
url va a terminar siendo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://jpalandri.github.io/&amp;lt;repo&amp;gt;&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Te clonas el repo, y haces &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; adentro:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
verne :: ~/misc/juli % git clone git&amp;#64;github.com:pignacio/pelican-test
Cloning into &lt;span class="s1"&gt;'pelican-test'&lt;/span&gt;...
remote: Counting objects: 3, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
verne :: ~/misc/juli % &lt;span class="nb"&gt;cd &lt;/span&gt;pelican-test
&lt;/pre&gt;
&lt;p&gt;Ahi corrés &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; y contestás las preguntas correspondientes:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
verne :: misc/juli/pelican-test ‹master› % pelican-quickstart
Welcome to pelican-quickstart v3.5.0.

This script will &lt;span class="nb"&gt;help &lt;/span&gt;you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What will be the title of this web site? Testeando pelican
&amp;gt; Who will be the author of this web site? Nach
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://pignacio.github.io/pelican-test
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
Done. Your new project is available at /home/ignacio/misc/juli/pelican-test
&lt;/pre&gt;
&lt;p&gt;Agregá un &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt; con lo que sigue, para no comitear los htmls
generados y otras cosas que no van:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Pelican directories
cache
output

# PID files

*.pid

# Python compiled files

*.py[co]
__pycache__
&lt;/pre&gt;
&lt;p&gt;Commiteamos y pusheamos eso a github:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
verne :: misc/juli/pelican-test ‹master*› % git add .
verne :: misc/juli/pelican-test ‹master*› % git commit -m &lt;span class="s2"&gt;&amp;quot;Initial commit&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;master 059e0e5&lt;span class="o"&gt;]&lt;/span&gt; Initial commit
 &lt;span class="m"&gt;5&lt;/span&gt; files changed, &lt;span class="m"&gt;345&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; Makefile
 create mode &lt;span class="m"&gt;100755&lt;/span&gt; develop_server.sh
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; fabfile.py
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; pelicanconf.py
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; publishconf.py
verne :: misc/juli/pelican-test ‹master› % git push
Counting objects: 8, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span class="m"&gt;6&lt;/span&gt; threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;7/7&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;7/7&lt;span class="o"&gt;)&lt;/span&gt;, 4.19 KiB &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;
To git&amp;#64;github.com:pignacio/pelican-test
   1f5c59c..059e0e5  master -&amp;gt; master
&lt;/pre&gt;
&lt;p&gt;Para confirar que todo está funcionando, podes hacer un push del sitio vacío a
las github pages con:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
verne :: misc/juli/pelican-test ‹master› % make github
&lt;/pre&gt;
</summary></entry><entry><title>Testeando articulos</title><link href="http://pignacio.github.io/pelican-test/testeando-articulos.html" rel="alternate"></link><updated>2015-04-26T18:33:00+02:00</updated><author><name>Ignacio Rossi</name></author><id>tag:pignacio.github.io,2015-04-26:pelican-test/testeando-articulos.html</id><summary type="html">&lt;p&gt;Este es un articulo en ReST&lt;/p&gt;
&lt;div class="section" id="subtitulo"&gt;
&lt;h2&gt;Subtitulo&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;esto&lt;/li&gt;
&lt;li&gt;es&lt;/li&gt;
&lt;li&gt;una&lt;/li&gt;
&lt;li&gt;lista&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="tag"></category><category term="otratag"></category></entry></feed>